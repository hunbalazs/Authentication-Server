#include "CryptManager.h"
#include <cassert>

CryptManager* CryptManager::Pointer = nullptr;

CryptManager* CryptManager::Instance()
{
	return CryptManager::Pointer;
}

CryptManager* CryptManager::Create()
{
	if (CryptManager::Pointer == 0)
		CryptManager::Pointer = new CryptManager();
	return CryptManager::Pointer;
}

CryptManager::CryptManager()
{
	DecStruct2_CEA1B0 = (_DecStruct2T*)CEA1B0_DATA;
	BFInit();
	TRInit();
}

CryptManager::~CryptManager() {}

void CryptManager::lock()
{
    TRC_mutex.lock();
}

void CryptManager::unlock()
{
    TRC_mutex.unlock();
}

std::string CryptManager::GenMD5(char* data, uint32_t length)
{
	MD5 md5 = MD5();
	md5.update(data, (uint32_t)length);
	md5.finalize();
	//printf("%s", md5.hexdigest().c_str());
	return md5.hexdigest();
}

///////////////////////////////////////// Blowfish Data /////////////////////////////////////////

const uint8_t CryptManager::sdata[] = // 4100
{
    0x54,0xD7,0x9E,0x8F,0x45,0x8B,0x26,0xDE,0xE8,0x3D,0x60,0x8B,0x82,0x06,0x83,0x7E,
    0xC2,0x92,0x8C,0x4D,0x2F,0x2E,0x1F,0x1F,0x35,0x3F,0x1B,0x5F,0x34,0x3E,0x17,0xD6,
	0x88,0x0B,0xE0,0xAF,0xE3,0x25,0xE3,0xA1,0x4D,0x43,0x56,0xC3,0xFF,0x01,0x12,0xB6,
	0xCD,0x61,0x84,0xE5,0xC2,0xE9,0x74,0x41,0xDA,0x47,0xCE,0xD2,0xB6,0x22,0xF0,0x49,
	0x5B,0xF5,0xCE,0x5E,0xC9,0x2E,0x0A,0x76,0x48,0xE9,0xB9,0x10,0x37,0x4C,0xE7,0xFD,
	0x58,0x92,0x97,0x19,0x2E,0xCB,0xF3,0x02,0xD2,0x0D,0x98,0xF8,0xFB,0x27,0xB5,0x2D,
	0x82,0x2F,0x06,0x97,0x94,0xD5,0x32,0x3C,0xE2,0xDD,0x5B,0x1B,0xCF,0x71,0x29,0xF8,
	0x78,0x08,0x6F,0x1F,0xD5,0xBB,0x78,0x6D,0x9F,0xF8,0x96,0x61,0x91,0xD6,0x9F,0x56,
	0x84,0x8E,0x48,0x03,0xF3,0xD2,0x46,0xE0,0xF5,0x17,0x5B,0x53,0x8D,0x76,0x8A,0x69,
	0x96,0x94,0x79,0xCC,0x34,0xC6,0xAE,0x2B,0x0F,0x1C,0x58,0x35,0x59,0x52,0x93,0x55,
	0x0D,0x02,0x68,0x02,0xA1,0x43,0x2F,0x75,0xD0,0x94,0xB3,0x83,0x8B,0xD9,0x74,0x35,
	0x90,0x07,0x8B,0x7C,0x70,0xE1,0x50,0x27,0xA3,0x5D,0x89,0xE6,0xEE,0x8C,0x67,0x0F,
	0x42,0xDD,0x8C,0x2E,0xAC,0xE0,0x64,0x90,0x31,0x37,0xDD,0xD6,0x20,0xAC,0x6D,0x5C,
	0x38,0xF9,0xCB,0xF9,0x84,0x0D,0x90,0xC1,0x97,0x7C,0x36,0x25,0x49,0xCF,0xBD,0xB3,
	0x82,0xF4,0x12,0x74,0x38,0x17,0xD8,0x3C,0x51,0xCA,0xF6,0x54,0x95,0xC7,0x8B,0x82,
	0x91,0xAF,0x6D,0x56,0xDB,0x96,0x56,0xEB,0x6E,0x3D,0xCC,0xAA,0x7E,0xD9,0x14,0xAA,
	0x72,0xB9,0x4B,0x3C,0x89,0x1D,0x12,0x0E,0xEA,0x31,0x50,0xFC,0x7A,0x92,0x99,0x12,
	0xFE,0x57,0x55,0x03,0xB0,0xD8,0x12,0x9C,0x1E,0x2F,0x35,0x47,0x4F,0xF6,0x44,0x13,
	0xE6,0x93,0xBB,0x54,0x2F,0x42,0x58,0x4D,0x2C,0xCA,0xC8,0xE4,0xB0,0xD8,0x0C,0x2A,
	0xD7,0x49,0x34,0x38,0x61,0x7D,0xD9,0x94,0xA8,0x3F,0xC4,0xCE,0x3B,0xBC,0x23,0x9D,
	0x18,0xFD,0xD1,0x17,0x34,0x2C,0x2D,0x7A,0xD4,0xD8,0x76,0xB3,0x56,0x64,0xAE,0xBD,
	0x8D,0x9E,0x2E,0xA6,0x89,0x0E,0x1E,0x89,0xAF,0xF7,0x56,0xB0,0x3E,0xB8,0x7C,0xCD,
	0xBD,0x31,0x45,0x52,0x10,0xA5,0x74,0x3B,0x2C,0x00,0x40,0x8B,0x43,0xD0,0x31,0x1A,
	0xB8,0x77,0x48,0x12,0x43,0x41,0xD2,0xC2,0x73,0xD3,0x77,0xD5,0xAA,0x47,0x39,0x22,
	0xF0,0x02,0xFF,0x5A,0xF7,0xE9,0x5B,0x30,0x5B,0xC7,0xAF,0x56,0xB3,0x58,0xF3,0xB8,
	0x01,0xA3,0xF0,0x1C,0x5A,0xB0,0x2B,0x47,0x5F,0xED,0xF6,0xF6,0x72,0x92,0x72,0x02,
	0x79,0x15,0xA8,0x90,0x6C,0xF1,0xF8,0xF4,0x15,0x35,0x23,0x2A,0x22,0xFB,0x73,0xF0,
	0x5F,0x1C,0x8A,0x82,0xB6,0x5B,0xC8,0x3D,0x14,0x6F,0x00,0xAF,0xB3,0xBC,0x78,0x9F,
	0x44,0x5A,0x37,0x20,0x5C,0xDE,0xA3,0x1D,0x7A,0xCB,0x47,0x8A,0x7A,0xED,0x3A,0x4B,
	0xE6,0x4F,0x91,0x1B,0xEE,0x26,0x08,0x6C,0xFE,0x2C,0x3D,0x45,0xD3,0x7F,0x14,0xC8,
	0xC0,0x09,0x62,0xA3,0xCC,0x6E,0x97,0x54,0x67,0xE2,0x1A,0x6F,0xBE,0xF8,0xBA,0xE3,
	0x43,0x16,0xAD,0x3F,0x2B,0x8A,0xF5,0x74,0x27,0xB0,0x29,0xD2,0x49,0x01,0x07,0x63,
	0xC5,0x8F,0x60,0x53,0x2A,0x54,0xD9,0xFB,0x24,0x57,0x31,0x03,0x6A,0xC5,0x3D,0x4F,
	0x40,0xEF,0x1E,0x36,0x64,0x00,0x86,0xFD,0x64,0x2C,0x94,0x6A,0x4F,0xC9,0x7C,0xF7,
	0xB2,0xF8,0xA3,0x52,0x09,0xCC,0x01,0xA2,0x78,0x47,0x0F,0xBF,0x31,0x75,0x32,0x51,
	0xF1,0x79,0x4F,0x4F,0x18,0x71,0x4E,0x04,0x15,0x25,0xF7,0x99,0x6E,0x10,0x18,0x34,
	0x43,0xEE,0xC4,0x51,0xCE,0x88,0x9E,0x77,0x5B,0x06,0xAF,0x3F,0x82,0x54,0x7D,0x45,
	0xAC,0x96,0xC4,0xAF,0x99,0xAF,0x89,0x02,0x53,0x93,0xC1,0xC3,0x42,0x42,0xF7,0x79,
	0x59,0x5D,0x9F,0xF8,0x7A,0x1B,0x32,0x96,0xB7,0xFA,0x20,0x1F,0x7E,0xE6,0xB5,0x21,
	0x8F,0x33,0xE3,0x02,0xA9,0xA2,0x09,0x3C,0xB4,0x17,0xE7,0x64,0x33,0x03,0xE9,0x34,
	0x18,0x80,0x01,0x13,0x1C,0x3E,0x76,0x4E,0x99,0x1A,0xF5,0xC6,0x79,0xE7,0x22,0xE8,
	0x20,0xB5,0xDC,0x2B,0x36,0xFF,0xD4,0xEB,0x9B,0xF0,0xE3,0xF7,0xF9,0x45,0x29,0x3C,
	0x88,0x6D,0x7E,0x3B,0x72,0x40,0x97,0x5C,0x9D,0xEF,0xAF,0x13,0xBD,0x57,0xB5,0x67,
	0xC7,0x51,0x69,0xB1,0x4F,0x68,0xD2,0x8B,0x05,0x9A,0xBC,0x7E,0x12,0xC2,0x21,0x8D,
	0xCF,0xEE,0xFF,0x6D,0xB6,0xA6,0x0D,0x03,0x75,0x9A,0xE1,0xF7,0x43,0x77,0x05,0xC0,
	0xFE,0x5E,0x23,0x2D,0x71,0x5F,0xCA,0xB6,0x31,0xA4,0x57,0x7B,0xC9,0x86,0xDC,0x43,
	0x1D,0x17,0xEF,0x7F,0x78,0x93,0x3E,0x39,0x27,0xC2,0x80,0xCE,0x38,0x35,0xED,0x96,
	0x62,0x60,0x0D,0x12,0x54,0x19,0xD3,0xA9,0x3B,0x1B,0x61,0x86,0xAD,0x70,0x36,0x12,
	0xD7,0x40,0x2A,0x9B,0x9F,0x4A,0xCF,0x50,0xE4,0xED,0xFC,0xB9,0x31,0x10,0xA7,0xAE,
	0x4C,0x21,0x48,0x55,0x4C,0x61,0xEE,0x8B,0x27,0x07,0x31,0x06,0xCD,0x13,0x11,0xFE,
	0x44,0xF1,0xB1,0x19,0x2A,0x32,0x9F,0x12,0x34,0x2C,0xE1,0x81,0xEC,0x16,0xD8,0x5A,
	0xF2,0x4D,0x07,0x84,0x4D,0x2E,0x90,0x01,0x97,0x96,0x20,0xEA,0xF1,0x1F,0xC7,0xA7,
	0x3C,0x5F,0x62,0xBC,0xA1,0x8B,0x0E,0xB5,0x08,0x56,0x18,0x05,0xE9,0xB9,0x45,0x01,
	0x99,0x7A,0x1E,0xC8,0x67,0x4F,0xB8,0xE3,0xD5,0x99,0xD3,0xAE,0xEC,0x66,0x8C,0xF3,
	0xA1,0x87,0xD4,0x75,0x8C,0xBD,0x78,0xEA,0xEE,0x7A,0x71,0xBE,0xBE,0x9B,0x89,0x5A,
	0x25,0xE5,0xCD,0xFE,0x27,0x4F,0x75,0x93,0xC4,0x32,0x2A,0xAD,0x11,0x43,0x8C,0x05,
	0x29,0xFE,0x57,0xD6,0x5F,0x22,0x06,0x50,0x06,0x23,0xB3,0xF6,0x13,0xA9,0xF4,0x38,
	0x90,0xC3,0x7D,0x7F,0x8D,0x2A,0xA3,0x21,0xC2,0x5D,0xFD,0x5A,0x58,0xF9,0x10,0x91,
	0x56,0x28,0x08,0x19,0x9F,0xE0,0x31,0x92,0x6E,0xB8,0x56,0xB5,0xB0,0x74,0xA9,0x9F,
	0x85,0xF6,0xAF,0x1B,0x74,0x28,0x7C,0xFD,0x0D,0xC3,0xEE,0x9C,0x36,0xE8,0xFB,0x8C,
	0xE1,0xCC,0x4B,0xB6,0x3A,0xA5,0x2A,0x59,0x00,0x06,0x14,0x47,0x84,0x1A,0x36,0x50,
	0xEE,0x57,0x79,0x9B,0x8C,0x23,0x9A,0x25,0xFC,0x4A,0x81,0x1D,0x8B,0x7C,0x6F,0x73,
	0x96,0x83,0xF8,0x53,0x87,0x42,0x21,0x45,0xCC,0x8B,0x10,0x37,0xFC,0x2B,0xDB,0xFE,
	0x31,0x90,0x9E,0xF7,0xD5,0x6B,0x77,0xEE,0x79,0x3D,0xF0,0xC2,0x63,0xF5,0x04,0xC2,
	0x03,0x84,0x4E,0xD3,0x3E,0x48,0x03,0xBF,0x77,0x9D,0xC0,0xC6,0x25,0xDD,0x3F,0xFA,
	0x64,0x8D,0x24,0xFB,0x48,0x58,0xEC,0xF6,0xCA,0xFE,0x00,0x1E,0x66,0x62,0x39,0x5A,
	0xC3,0x02,0x9F,0x8A,0xA9,0x7F,0xC1,0x34,0xF1,0xF5,0xCB,0xA3,0x77,0x76,0x27,0xB3,
	0x39,0xDE,0x16,0xA5,0x46,0x83,0xF7,0xA2,0x07,0x6F,0xD6,0x75,0x0B,0xEC,0xD4,0x5D,
	0x1E,0x8C,0x49,0x8E,0xF1,0xEF,0xB7,0xDD,0x4C,0x68,0x7A,0x8A,0xCA,0xA8,0x83,0x25,
	0x06,0x91,0x79,0x96,0xCF,0xB5,0xB1,0x9A,0x15,0x20,0x18,0x88,0xF4,0x5B,0x49,0xC8,
	0x55,0x7B,0xE5,0xDA,0xD8,0x4C,0x52,0xE1,0x56,0x82,0x8E,0xC6,0x51,0xAA,0xA3,0x0E,
	0xC9,0x9F,0x39,0x82,0x89,0x0F,0xC2,0x02,0x56,0x01,0x8C,0xE7,0xC5,0x48,0xC6,0x2F,
	0xC8,0xEB,0x01,0x75,0x7E,0x58,0x84,0x91,0xB2,0xBD,0x03,0xAC,0xD3,0xA2,0xEF,0xB0,
	0x84,0xF5,0x70,0xB5,0x23,0x5B,0x55,0x50,0xC9,0x1D,0xCA,0x72,0xD4,0x87,0xD8,0xAD,
	0x73,0x41,0x22,0x5D,0x04,0x38,0xE2,0xD0,0x17,0x23,0x38,0x2F,0xF1,0x5F,0xAE,0x11,
	0xA3,0x87,0x0F,0x6B,0xA5,0x7E,0xCD,0x0B,0x29,0x73,0x21,0xAB,0xD2,0x6D,0xCF,0x87,
	0x7E,0x0D,0x24,0x4B,0x7F,0x6E,0x3A,0xA1,0xA4,0x1F,0xBC,0x73,0x55,0x4A,0xB1,0x2D,
	0xAE,0xB1,0xAD,0x0A,0xF8,0x65,0xA1,0x3E,0xC2,0xC4,0xD1,0x0F,0xEE,0x34,0x5D,0xAB,
	0x3D,0x23,0x3C,0x96,0xD8,0xA4,0x81,0x31,0xB9,0x4D,0x97,0xE1,0x9B,0x8F,0x6E,0x5F,
	0xAE,0xDE,0xAC,0x8F,0xC4,0x3A,0xAF,0xD2,0x68,0xD0,0xF2,0x1E,0x3F,0xB5,0x30,0xBE,
	0x88,0xEF,0x85,0x1C,0x8F,0x08,0x27,0x58,0x98,0xF5,0x2D,0x2C,0x25,0xBD,0x93,0xEC,
	0xB8,0x94,0x8E,0x63,0x5D,0xF2,0x73,0x42,0xDC,0x16,0xBA,0xA0,0x5B,0x1F,0xFE,0x20,
	0x9A,0xAE,0x03,0xD8,0x79,0x1A,0xE5,0xC8,0x47,0xB5,0xD0,0x16,0x25,0xB8,0xCE,0x8A,
	0x86,0x33,0x75,0x2E,0x65,0xD1,0xA0,0xB5,0x36,0x39,0x0A,0x3C,0x65,0x96,0xA6,0xA5,
	0x2E,0x62,0x12,0x51,0xFE,0xF3,0x14,0xCB,0x31,0xFB,0x20,0x52,0x1F,0x57,0xF6,0xAC,
	0x5D,0x54,0xC4,0xE1,0x27,0xF6,0xD1,0x4A,0xBE,0x69,0x99,0x04,0x18,0xE3,0x6C,0xD8,
	0x92,0x56,0xA0,0x0B,0x1B,0xEF,0xA9,0x67,0xC8,0x97,0x0D,0x46,0x47,0x91,0x69,0x63,
	0x53,0xD3,0x26,0xCB,0xED,0xFA,0x04,0x4A,0x1E,0x5E,0x6B,0x40,0xAA,0x90,0x1C,0x45,
	0xD2,0x2B,0xF8,0x5B,0x9A,0x81,0x11,0x35,0x9B,0x2A,0xC2,0xA4,0x90,0x1F,0x3B,0xB6,
	0xE6,0x62,0xEC,0x11,0x2D,0xB1,0xE3,0x3C,0x9C,0xB1,0x0B,0xBC,0x71,0x67,0x3A,0x2E,
	0xFB,0x66,0x1C,0x75,0x07,0x1C,0x1E,0xAC,0x0F,0x97,0x94,0x51,0x7D,0x5C,0x10,0x30,
	0xC2,0x73,0x7D,0x51,0x1A,0x7B,0x68,0xF3,0x6D,0x8F,0x37,0x3B,0xCE,0x6F,0x4E,0x97,
	0xD6,0xC4,0xC9,0xD4,0x4B,0x4A,0x47,0x81,0xD7,0x98,0xFB,0x0E,0xE7,0x8D,0x6E,0xCB,
	0x74,0x33,0xBC,0xB1,0x0F,0xC9,0x7C,0x8B,0x3D,0xEA,0x89,0xC8,0x32,0x71,0xCA,0x5D,
	0xE1,0x36,0x61,0xC8,0x50,0x3E,0x4D,0xE0,0x91,0x75,0x50,0x82,0xDC,0x51,0xD1,0x34,
	0x67,0x84,0x5A,0xB1,0x11,0xBB,0xAD,0x58,0x04,0x37,0xA5,0x70,0xBF,0xD2,0x83,0x86,
	0xA6,0x24,0xC0,0x58,0xB7,0x20,0x28,0xFA,0x4B,0x9E,0xD9,0x93,0x15,0x56,0xC5,0x14,
	0x21,0x65,0x47,0x5E,0xC6,0xFA,0xE4,0x42,0xB0,0xF6,0x9A,0x97,0x2B,0x9A,0x6C,0x1D,
	0xE7,0xEA,0x55,0xF8,0xC2,0x7B,0x5C,0x4C,0x00,0x9C,0xB6,0x96,0x74,0x9D,0xBC,0x52,
	0x74,0xED,0x4C,0x7A,0x55,0x60,0x4C,0xEC,0x41,0x84,0xCB,0x19,0xAE,0xE6,0x6F,0x44,
	0x8D,0xD4,0xFA,0xD7,0x05,0xC5,0x8F,0x58,0x52,0xFB,0xEF,0xB0,0x11,0x13,0x16,0x43,
	0x58,0xCC,0x23,0xEF,0x7F,0xBC,0xA2,0xE5,0x22,0x88,0x10,0xF9,0xAC,0xA3,0x84,0x79,
	0x92,0x9D,0x42,0x83,0x1D,0xC1,0x23,0x51,0x67,0xEC,0xE1,0x44,0x0D,0xA0,0x40,0xF5,
	0xFF,0xE4,0x12,0x45,0x69,0xC1,0x47,0x71,0x2E,0xCA,0xA1,0x81,0xA1,0x52,0x37,0x2D,
	0xD8,0xDD,0x52,0x2F,0xA5,0xFA,0x97,0x33,0x70,0x62,0xB1,0x3E,0xE4,0xB3,0x8C,0xDD,
	0x0B,0x32,0x75,0x30,0x6A,0x77,0xC2,0x05,0x3C,0x20,0x28,0xF6,0x5C,0xA4,0x43,0x42,
	0x61,0x3F,0x9B,0x19,0x1F,0xD4,0xEF,0x25,0x53,0xC4,0x59,0x62,0x4A,0xDB,0xAA,0x9C,
	0xED,0x27,0xDD,0x1C,0xFA,0x03,0xCD,0x2A,0xE1,0x83,0xF1,0x36,0x83,0x31,0x18,0xFB,
	0xDD,0x16,0xD6,0xD2,0x91,0x2A,0xCC,0x09,0x25,0x4E,0x45,0x0E,0x2B,0x5F,0x51,0x71,
	0xD1,0x49,0x40,0x02,0xEA,0x9B,0xCD,0x4E,0x20,0x67,0x5F,0x65,0x43,0x15,0xEE,0x08,
	0xBD,0x71,0x96,0x5C,0x57,0x00,0x58,0x1B,0x24,0xD9,0x1C,0xA9,0x44,0xB3,0x34,0xE9,
	0x52,0x7C,0x52,0x8A,0x38,0x1E,0x2F,0x7A,0xBD,0x70,0x9F,0xE1,0xDC,0xAB,0x9B,0x1F,
	0xB1,0x42,0x73,0xA0,0xCF,0x70,0xEE,0x3A,0xE7,0x93,0xA4,0x06,0x3C,0xBE,0x1A,0xE5,
	0x68,0x5F,0x63,0x35,0x19,0x3F,0xDB,0x75,0x0F,0x2E,0x9C,0xD4,0xE1,0x36,0x04,0x2B,
	0xF7,0xD8,0x6B,0xD0,0xCE,0x88,0x2B,0x28,0x02,0x4D,0x54,0x3B,0x8D,0x58,0x0D,0xC3,
	0xF1,0x42,0xD7,0x11,0x89,0x7C,0xEE,0x19,0xB4,0x83,0x22,0x8B,0xF6,0x33,0x6B,0xF8,
	0xE3,0x4B,0xBF,0xB5,0xCE,0x21,0x8D,0x39,0xAE,0x8F,0xD4,0x12,0x26,0x14,0xAE,0x33,
	0xD8,0xA6,0x4A,0xF1,0xB6,0x4C,0x6F,0xE7,0x45,0x0A,0x0F,0x9D,0x91,0x96,0xF4,0x61,
	0xD7,0x88,0x5B,0x7E,0x93,0x2C,0x6F,0xF6,0x69,0x4A,0xBD,0xA7,0x54,0x52,0x13,0xE4,
	0x4E,0x90,0x6A,0x58,0xFF,0xF2,0x6F,0xCE,0x27,0xB5,0x15,0xEC,0x1A,0x4B,0x05,0x2F,
	0xCB,0xFD,0xD9,0xFF,0x45,0x3D,0xBD,0x3B,0x5F,0x08,0x03,0x78,0x91,0xE2,0x00,0xE3,
	0xD8,0x58,0xF3,0xBC,0xC5,0x25,0xA4,0x35,0x6C,0x15,0xC1,0x51,0x6B,0x04,0x0D,0x22,
	0x03,0x6A,0x6F,0x23,0xDE,0x1A,0x1E,0x7C,0x91,0xE8,0x50,0x15,0x17,0x6E,0x87,0xAE,
	0x76,0x60,0xE7,0xF4,0xA4,0x33,0x50,0x78,0xDA,0xDD,0x68,0x90,0x1C,0xFF,0x97,0xAF,
	0xF7,0x56,0x64,0xCF,0x59,0x07,0x3C,0xFA,0x4A,0x6E,0x9E,0x98,0x25,0x06,0x43,0xFF,
	0x8F,0x10,0xD8,0x1E,0x75,0x4C,0x43,0xBE,0xD8,0x9E,0xE8,0xAA,0x46,0x3D,0xC2,0x54,
	0xB5,0x8B,0x44,0x01,0x1B,0x49,0x5E,0x0D,0xD9,0xA9,0x14,0xCD,0x46,0x54,0x43,0x62,
	0x22,0x69,0xF2,0x22,0x8A,0x86,0xB6,0x26,0xCD,0x78,0xB2,0xDA,0x30,0x1F,0x76,0x6D,
	0x01,0xEC,0x27,0x88,0x9D,0xA3,0x9D,0xCF,0xFE,0xEE,0x40,0xE4,0x50,0x1D,0xFA,0x57,
	0xC4,0x60,0x8D,0xBE,0x52,0x84,0xCA,0xE7,0xB5,0x63,0x45,0x8B,0xDB,0xC2,0x0B,0x3D,
	0x03,0x39,0xF2,0x3C,0x15,0xFA,0x6F,0xF5,0x63,0xA9,0xA3,0xFE,0x56,0x4C,0x9B,0x3E,
	0x3F,0x0C,0x63,0xCB,0xDE,0xD5,0xDB,0x4B,0x8C,0xE3,0x42,0xD8,0x0B,0x2F,0x7B,0xC2,
	0x72,0x4F,0x6B,0x36,0x82,0x23,0xCE,0xE7,0x11,0xAD,0x98,0xC5,0x7A,0x90,0xB3,0xD0,
	0x64,0xA4,0x96,0x70,0x92,0x90,0x03,0x30,0xE1,0x0E,0x0F,0x3D,0x54,0x80,0xDE,0xE3,
	0x6A,0x6D,0x25,0x74,0xD3,0x23,0x2E,0x76,0x42,0x80,0x01,0x1F,0x2F,0x6D,0xB1,0x8B,
	0x28,0xFE,0x8D,0xF2,0xFC,0x6B,0x1B,0xAE,0x20,0xBA,0x8B,0x75,0x71,0x6E,0x55,0x8B,
	0xD8,0x4B,0xEA,0x52,0x80,0x95,0x01,0x27,0xAC,0x6C,0xA3,0x6C,0x19,0x18,0xED,0x34,
	0xEE,0xEA,0xBE,0x52,0x69,0x39,0x86,0xA2,0xFD,0xDC,0x2C,0x74,0x5B,0x57,0xA8,0x12,
	0xC7,0xA6,0xC4,0x74,0x6A,0xEC,0x58,0xEC,0x78,0x5F,0x01,0x95,0x85,0xD1,0x74,0x39,
	0x31,0x0D,0x93,0x10,0x23,0x36,0x40,0x91,0xB7,0x08,0x61,0xA0,0x9D,0xF0,0xC0,0x6B,
	0xBA,0x0B,0xEA,0x51,0x0C,0x2E,0xE4,0x26,0xC2,0xD8,0xC2,0x72,0x9D,0x7D,0xFB,0x3F,
	0xE8,0x18,0xA0,0x6D,0xC1,0x98,0x18,0x91,0x0A,0x5E,0x9E,0x3B,0x51,0x66,0x0A,0x6F,
	0xC1,0x83,0xC8,0xDA,0x00,0x7E,0xDA,0x5E,0x4D,0xD9,0xD7,0xC9,0xE3,0xA5,0x94,0xE5,
	0xCD,0xEB,0xD2,0x5C,0xA9,0x38,0x2A,0x52,0x27,0x4E,0xDE,0x69,0x64,0x37,0x5A,0xFB,
	0x7D,0xA9,0xC3,0x4F,0xBE,0x76,0xED,0x8D,0x6F,0x53,0xAD,0x64,0x39,0x42,0x7D,0xEA,
	0x95,0x0D,0x25,0x87,0x72,0xE0,0x4E,0x5C,0x30,0x1A,0xA0,0xC5,0xA3,0x0E,0x18,0x32,
	0xF2,0x4C,0x76,0x2F,0xF6,0xBB,0x41,0x86,0x34,0x14,0xE3,0x4A,0x57,0x64,0x81,0x8C,
	0xFF,0x03,0x4D,0xB8,0xBA,0xF1,0x33,0xFE,0xEB,0xBC,0x03,0x8B,0xDB,0x74,0x3A,0x62,
	0x5A,0xBF,0xD8,0x3A,0x45,0xB5,0x08,0x85,0xE5,0x42,0xBE,0x2F,0x20,0x0E,0x1A,0x70,
	0xA6,0x47,0x6F,0xA1,0xE6,0x0C,0xC9,0x88,0x24,0x83,0xFB,0xB7,0x62,0xF2,0x40,0x60,
	0x70,0x61,0x87,0x85,0xAF,0x1C,0x5E,0x74,0x49,0x8A,0x67,0x26,0xC4,0x84,0x3E,0xB3,
	0xBE,0x4A,0x2F,0xEB,0x7A,0xD2,0x2A,0xAF,0x31,0xAC,0x2D,0x6F,0x23,0xFE,0x88,0xA2,
	0xE8,0x2F,0x77,0x84,0x91,0x58,0x4B,0x36,0x7F,0x33,0x7A,0x33,0xAA,0xB5,0x87,0xF7,
	0xC7,0x21,0x6F,0xD4,0x29,0x29,0x82,0xCB,0x14,0x9A,0x2B,0x7D,0x51,0x37,0x9D,0x66,
	0x1F,0xFB,0x35,0x15,0x16,0xFD,0x25,0x6D,0x57,0xB4,0xD3,0x03,0xAB,0x47,0x6F,0xEE,
	0xE2,0x86,0x4C,0x14,0x1F,0xEA,0xFE,0x6D,0x20,0xC6,0xC7,0x5B,0x31,0x66,0x92,0x15,
	0x99,0x00,0xD0,0xDC,0xA8,0x2A,0xAE,0x3C,0x8B,0xA8,0x4B,0xF6,0x2E,0xA8,0x26,0xAA,
	0xA2,0x89,0x65,0xFB,0x4F,0xE2,0xD7,0xE8,0x10,0x7C,0x88,0xC7,0x48,0x01,0x9F,0x1E,
	0xBD,0xFB,0xD0,0x45,0x21,0x9F,0xE7,0x11,0x6E,0x8D,0x9B,0x1B,0x9C,0x6B,0x6C,0x51,
	0x69,0xA0,0xEA,0x22,0xA9,0xE0,0x24,0xC2,0xFF,0x71,0x32,0x9D,0x6E,0x5D,0x64,0x1B,
	0x18,0x91,0x26,0xC2,0x5E,0xB0,0xE5,0x6F,0xB5,0x9C,0x6B,0x11,0x9C,0x03,0x09,0xFE,
	0xF5,0x3E,0x2F,0x4B,0x14,0xE0,0xE6,0xD4,0x26,0x39,0x6B,0xC0,0x3D,0x73,0x90,0xA2,
	0x50,0xF4,0x33,0x59,0xEB,0x0C,0x43,0x0A,0x99,0xAE,0xD9,0xD6,0x48,0xB2,0x0F,0xFE,
	0x1F,0xED,0xBD,0x0C,0x0F,0x2B,0xC4,0xA7,0x67,0xDD,0xF1,0xCB,0xDD,0xC4,0xAB,0x3A,
	0xB0,0x46,0x2C,0x20,0x14,0x61,0xFA,0x74,0x81,0x0B,0xDD,0xDD,0x71,0xD3,0x73,0x3D,
	0x63,0xA0,0x3A,0xFE,0x0D,0x2C,0x63,0x06,0xC1,0xCE,0xF2,0xD3,0x7A,0x3E,0x63,0x75,
	0x0F,0x68,0xC2,0x03,0xA0,0xE6,0x57,0x6E,0x02,0xCC,0xE1,0x08,0xE7,0xE1,0xA1,0xB7,
	0x31,0xC2,0x41,0x78,0x5F,0xE4,0xC6,0xDF,0x45,0x3B,0x6C,0x7D,0x0E,0xA1,0x39,0x0A,
	0xC9,0xF0,0x43,0xAA,0x81,0x46,0x1B,0x24,0x64,0xC3,0x49,0x2D,0x72,0x10,0x12,0x14,
	0x19,0x12,0x49,0xC6,0xA6,0xCA,0xAE,0x5B,0xD7,0x54,0x64,0x6D,0x7B,0xD3,0xED,0xA0,
	0x3A,0xC5,0xF7,0x14,0x56,0x89,0x95,0xA7,0x5A,0x9B,0xEA,0x5A,0xDB,0x29,0xB7,0xA7,
	0x70,0xF8,0xC6,0xE5,0xF0,0x12,0xEC,0xF1,0x42,0x94,0xD0,0x3A,0x6C,0x43,0xC3,0x37,
	0x2B,0x73,0xC1,0x8A,0xB3,0x72,0x71,0x94,0x0F,0xE7,0x7D,0xE3,0x84,0x8A,0x91,0x61,
	0xF9,0xDD,0x50,0x84,0xD7,0x03,0xB0,0x7B,0x19,0xAD,0x3F,0x45,0x12,0x11,0x74,0x75,
	0x41,0x17,0xF7,0x3E,0x29,0x89,0xDD,0xA1,0x3D,0xFC,0xB2,0x4A,0x36,0xB1,0xDC,0x43,
	0xCE,0x11,0x3F,0x9A,0xE8,0x8A,0xE7,0xFF,0x6C,0x7A,0x5D,0x71,0x2F,0x5B,0x4E,0x87,
	0x5C,0x63,0x9D,0x32,0xFB,0x3A,0x1E,0xF8,0xC6,0xB9,0x36,0xAD,0x1D,0x65,0x98,0xCA,
	0xB2,0x42,0xDA,0x62,0xB4,0xE0,0x44,0x42,0xC7,0x58,0x3F,0x9C,0x31,0x26,0xAD,0x7C,
	0x29,0x5A,0x14,0xFC,0xCB,0xA2,0x78,0x3F,0x74,0x04,0x4E,0xA3,0xE6,0x1C,0x62,0xF1,
	0xAA,0x34,0xF4,0xDB,0xD9,0xDE,0xCD,0xDC,0xAB,0x73,0xE8,0x9D,0x49,0x20,0x61,0xBB,
	0xF6,0x93,0xA8,0xF7,0x42,0xED,0x28,0x7F,0x86,0xF4,0xE4,0xC1,0x33,0x64,0x6E,0x8C,
	0x61,0x62,0xA5,0xE4,0x55,0xA7,0xA8,0x81,0xA4,0xEF,0x81,0x6E,0x6D,0x27,0x48,0xFC,
	0x00,0x0E,0xE1,0x05,0x46,0x28,0xE3,0xE8,0xD4,0x1E,0xA2,0x45,0x20,0x39,0x99,0xB7,
	0x77,0xA6,0x84,0xC7,0x91,0x26,0xDD,0x28,0x09,0x90,0x2D,0x50,0xA4,0x43,0x6D,0xB4,
	0xF9,0x68,0x75,0x4B,0x42,0xFD,0x18,0xFD,0xCF,0x76,0x6C,0x70,0xF5,0x71,0xB9,0x38,
	0xEA,0xD5,0x7C,0xD6,0x8C,0x31,0x67,0xBB,0x3A,0xCE,0xC2,0x6A,0x08,0xD1,0x6B,0xCA,
	0x40,0x7C,0x68,0x40,0x94,0x0D,0x6A,0x4E,0xBE,0x11,0xF6,0x95,0xC4,0x9F,0xC6,0x44,
	0x67,0x4E,0x08,0x20,0x80,0x5D,0x03,0x7F,0xE5,0x31,0xFB,0x12,0xA8,0x09,0x31,0x74,
	0x1C,0x11,0x3D,0x42,0xA2,0x68,0x2C,0x3F,0xA4,0xCC,0x99,0xF8,0x82,0x0B,0xFD,0xCC,
	0x3A,0x2D,0x10,0x4C,0x46,0xAB,0xBF,0x7D,0xCA,0x97,0x36,0xE4,0xC0,0xF7,0x9C,0x8E,
	0xE7,0x14,0xE6,0xC1,0x04,0xB1,0xD6,0x88,0xC3,0x9D,0x9A,0x7B,0x00,0xA6,0x9D,0xB9,
	0x52,0x1D,0x3F,0x5D,0x8D,0xF7,0xAD,0x8F,0xEE,0x4F,0xDE,0xFE,0x81,0xAC,0x25,0x50,
	0x52,0xF8,0xE6,0xAA,0xA2,0x5B,0x3D,0x75,0x10,0x50,0x49,0x34,0xCF,0x18,0xE6,0xD0,
	0xCA,0x3D,0xE4,0xC9,0xC0,0xE9,0x63,0xBB,0xC8,0x10,0xCF,0x52,0x59,0xD8,0x10,0xA4,
	0x44,0xA4,0x12,0xEF,0x2B,0x3E,0x7D,0x73,0xC5,0x27,0x3C,0x2C,0x1C,0xC1,0x4B,0x23,
	0xFD,0xDE,0xC9,0x4A,0x59,0x6E,0x5B,0x46,0x6B,0x15,0xB5,0xF1,0x51,0xAE,0xFE,0x14,
	0xAB,0x93,0x6B,0xD7,0x33,0xEB,0xCA,0x57,0xFF,0xA9,0x44,0x2F,0x35,0xF1,0x45,0x3F,
	0xCA,0x72,0xB3,0xBC,0xE4,0x84,0xE0,0x83,0x7A,0x6B,0xFF,0x7B,0x26,0x2B,0x43,0x39,
	0xFB,0x5B,0xF6,0x40,0x97,0x2E,0x04,0x24,0x51,0xBC,0x51,0x11,0x3D,0x2A,0xC1,0xF0,
	0x74,0x5B,0x33,0xF2,0xA4,0x34,0xEA,0x74,0x86,0xCE,0xDC,0x49,0x0E,0x26,0x63,0x99,
	0x04,0x70,0x66,0xE1,0xFE,0xBD,0x03,0x01,0x32,0x70,0x59,0xFA,0x0E,0xE2,0x4D,0xFD,
	0x05,0x51,0x48,0x00,0xAE,0x3B,0xD2,0xA5,0xA0,0xFC,0x7C,0xC3,0xE4,0x81,0x00,0x44,
	0x22,0x4B,0x26,0xAB,0xA8,0x59,0x64,0x0E,0xC1,0xA3,0x90,0x41,0x86,0x8B,0x2C,0x44,
	0x97,0xB2,0x02,0x89,0x31,0xC8,0xE6,0x9B,0xD9,0x08,0xF9,0x28,0x36,0x67,0x34,0x4B,
	0xCD,0x95,0x2D,0xC8,0x9B,0x05,0x87,0x0D,0xB3,0x6A,0x22,0x29,0xB4,0x76,0xD8,0x86,
	0x80,0x12,0x6A,0xE8,0x82,0x13,0xCF,0x19,0x2F,0xC3,0x04,0x65,0xAF,0x9A,0xA1,0xDD,
	0x45,0xF3,0x17,0x24,0x61,0xED,0xEF,0xF0,0xD1,0xED,0x29,0x41,0xD7,0x4C,0x15,0xEE,
	0x31,0x62,0x8C,0xCE,0xB8,0x9B,0xE6,0x44,0xD4,0x89,0x41,0x2B,0x79,0xE7,0x56,0x51,
	0x85,0x27,0xC3,0x4F,0xC4,0xE1,0x34,0x43,0x47,0xB3,0x6B,0xD6,0x3E,0x46,0x04,0x71,
	0x38,0x6A,0xFB,0x90,0xD8,0x77,0x49,0x88,0x7A,0x64,0x0B,0x62,0xE1,0xD9,0x83,0x1B,
	0xAB,0xB7,0xF4,0x48,0xC7,0x9C,0x4B,0x13,0xCE,0xC5,0x67,0xDF,0x24,0xC6,0x5F,0x15,
	0x3D,0x98,0x74,0xF6,0xC8,0x2D,0x54,0x6F,0x22,0xCC,0x80,0x3A,0x0C,0x3B,0xB5,0xF8,
	0x85,0x3F,0x88,0x35,0xC3,0xF8,0xA4,0xA9,0xDD,0x7B,0xBF,0x47,0x95,0x7E,0x6F,0x72,
	0x47,0x01,0x6F,0x0A,0x7C,0x32,0xFA,0xAD,0x6A,0xD2,0x42,0xAA,0xF8,0xC2,0x24,0x5C,
	0x5E,0xEF,0x22,0xDF,0xAC,0x5C,0x24,0x2F,0x77,0xC5,0x3A,0x6F,0xD0,0x5D,0x99,0x3C,
	0x80,0x1D,0x93,0x08,0x74,0xA2,0x79,0x31,0xBE,0x41,0x26,0x18,0x02,0x0C,0x41,0x4B,
	0x49,0x68,0x7E,0x2C,0x35,0xA0,0xC8,0x05,0xFB,0x9C,0x1C,0x93,0xC1,0xF6,0x3D,0xB9,
	0x96,0xF9,0x1D,0xF6,0x66,0x23,0x1D,0xE4,0x6E,0x90,0xB7,0x87,0xB5,0xED,0x0B,0xBB,
	0x5C,0xF8,0xD7,0xA5,0x54,0xA2,0x4E,0xCF,0xF4,0x45,0x62,0x2F,0x56,0xB2,0xEA,0x41,
	0x82,0x1B,0x45,0x20,0x29,0x7B,0xB9,0x8C,0x8D,0x15,0x51,0xBA,0x61,0x53,0xE3,0xE8,
	0x16,0x25,0xF2,0xEA,0x23,0x95,0x7D,0x32,0xBA,0xF8,0x17,0x10,0x81,0xF2,0x30,0xF9,
	0x1F,0xC9,0x44,0x8C,0x2F,0x8D,0x73,0x3B,0x45,0xF8,0x4A,0xA6,0x79,0xA7,0x7E,0x19,
	0x01,0x50,0x1D,0x51,0x9F,0x9B,0xA2,0x9E,0x0F,0x2F,0x86,0x41,0xC0,0xA8,0x3F,0x1B,
	0x2F,0xE2,0x3A,0x43,0x38,0x50,0xB5,0xA0,0x8F,0xE7,0x6F,0x7E,0x13,0x5D,0xE5,0xD6,
	0xCE,0x07,0x42,0x21,0x04,0x4A,0x74,0x45,0xEA,0xAD,0x9E,0xB3,0x1F,0x7F,0xE9,0x7C,
	0x2A,0xA0,0x89,0x09,0x65,0xF3,0x44,0xD6,0x95,0xB9,0xFD,0x6E,0xD9,0xCD,0x05,0xB2,
	0xA9,0x44,0x1B,0xB2,0x1F,0xBB,0xC5,0x57,0x0D,0x92,0x80,0x2C,0x3E,0x27,0x80,0xB6,
	0xCC,0x81,0x0B,0x46,0x1A,0xA8,0x2C,0x01,0x2A,0xF1,0xBD,0x08,0x44,0x37,0x43,0x05,
	0xE9,0xDD,0xC0,0x2F,0x23,0x2E,0xF7,0x09,0xC7,0x9F,0xA4,0xBE,0x14,0xA1,0x21,0x54,
	0x7B,0xDA,0x4D,0xC4,0xB6,0xBA,0x9D,0xE4,0x77,0x73,0x7B,0x48,0x0F,0xE1,0x82,0xD2,
	0x96,0x31,0x0C,0x6D,0xBB,0x90,0xAE,0x61,0x66,0x82,0x34,0xBF,0x85,0x55,0xC7,0x30,
	0xA5,0x11,0xAD,0x2E,0xFD,0x22,0x34,0xA5,0xD2,0x17,0x97,0x98,0xD1,0xCB,0x32,0x20,
	0x18,0x15,0x49,0x0C,0x56,0x4E,0x2F,0xB0,0x62,0xA1,0xF3,0x4D,0xE8,0xA7,0x0D,0xD4,
	0x5C,0xBD,0x19,0x85,0x82,0xFC,0xC1,0xEB,0x9E,0xD2,0xCA,0x2F,0x9F,0x13,0x56,0x44,
	0xF3,0x69,0x62,0x18,0xA5,0x58,0xCB,0x4D,0xF7,0x03,0x85,0x6C,0x38,0xC4,0x04,0x8A,
	0x44,0x00,0x6B,0x6A,0x1A,0xA6,0x5A,0xE0,0xC4,0x34,0x93,0xA2,0x2E,0xA8,0x87,0x89,
	0xB7,0x7E,0xBA,0xF0,0x85,0xC2,0x18,0xBD,0x28,0xB0,0xB0,0x06,0x90,0x66,0xA6,0xA0,
	0x36,0xCA,0x4B,0x0F,0xCE,0xCD,0x70,0xD5,0x31,0xFC,0xCF,0x1E,0x47,0xB8,0x01,0xD6,
	0xD8,0x1B,0x0F,0x88,0x37,0x14,0xD4,0x22,0xA9,0xBD,0x9B,0x02,0x63,0xD4,0xED,0xF2,
	0x8A,0x6D,0x91,0x5A,0x4F,0x95,0x04,0xD7,0x29,0x03,0x57,0x30,0x4E,0x56,0xC2,0x0B,
	0x6E,0x94,0x4D,0xB4,0xAC,0x27,0xF7,0x26,0x92,0x7F,0x65,0x45,0xB7,0x1F,0xD1,0x1A,
	0x06,0x2F,0x4F,0xB1,0xED,0xF3,0x1A,0x89,0xB5,0x18,0x44,0x99,0x41,0xE3,0xC6,0x9D,
	0x00,0x47,0xBB,0x62,0xE4,0xA3,0xE2,0xDA,0x64,0x73,0xD2,0x07,0x2F,0xF6,0xD1,0x2F,
	0x89,0xEA,0x57,0x89,0xC9,0x80,0x69,0x2F,0xF9,0xF8,0xBB,0xB8,0x8A,0x78,0x02,0x5D,
	0x84,0x41,0x95,0xE5,0x8D,0xFE,0x08,0x43,0x56,0xF7,0x77,0xD7,0x93,0xFB,0xD1,0xE8,
	0x0A,0xEF,0x04,0x55,0xC4,0x51,0x4B,0x47,0x7C,0x01,0xA6,0x5D,0x13,0x6C,0x15,0x5B,
	0x33,0x06,0x76,0xDE,0xFE,0x04,0x7D,0xC1,0x47,0xEF,0x5B,0xF2,0x38,0xCD,0x63,0x5F,
	0xEB,0xCC,0x43,0x4D,0xC7,0xC9,0x65,0xFE,0xD6,0x5E,0x8F,0xF3,0xD9,0x55,0x2E,0x7F,
	0xC6,0x9C,0xD1,0x75,0x3F,0xCE,0xB6,0x03,0x80,0x78,0x9A,0x82,0xB5,0x58,0xF6,0xF8,
	0x8A,0x46,0xC2,0x86,0x72,0x2A,0xC5,0xD5,0xEA,0x25,0x30,0xA7,0x9E,0xDE,0x1D,0x09,
	0x5D,0x9F,0xC0,0xA2,0xF0,0xDB,0xEB,0xEB,0xEA,0x9A,0x0C,0xD6,0xD3,0xC3,0xB1,0xED,
	0x65,0x9E,0x2D,0x20,0xBF,0x99,0xEF,0x9D,0x61,0xFC,0x6C,0x30,0xE1,0xCA,0x5B,0x32,
	0x2B,0xBC,0x0A,0x57,0x85,0xF1,0x76,0x99,0x77,0xE1,0x18,0x45,0x2A,0x0B,0x5D,0xAF,
	0xA0,0xFD,0xF9,0x17,0x59,0xD9,0x4A,0x26,0x68,0xDD,0x81,0x5A,0x61,0xD1,0x21,0xC9,
	0x49,0x20,0xCE,0xE1,0x11,0x53,0x68,0xA3,0x97,0xBA,0xFB,0xFB,0xAC,0xE8,0x21,0x1A,
	0x43,0x29,0xCE,0x5B,0x7D,0x8A,0x75,0x7D,0xA2,0x8A,0x59,0x5D,0x0B,0x15,0x71,0x89,
	0xB4,0xC3,0xBA,0x00 // this last line is probably something else because it wont get used anywhere
};

const uint8_t CryptManager::BF_PTransformed[4*18] =
{
	0xC6,0x5B,0x91,0xAE,0x3F,0x6B,0x42,0x15,0x9A,0x8A,0xED,0x79,0x91,0x40,0x1C,0x0E,0x6A,0x28,
    0xB7,0xFB,0x6C,0x50,0x54,0x18,0x5D,0x24,0x20,0xF6,0xDE,0xB6,0x33,0x97,0x28,0x8C,0xB1,0x6F,
    0x70,0x7C,0x8B,0x4C,0xF6,0xD4,0xE2,0x85,0x12,0x6A,0x93,0xE4,0x53,0xDF,0x6C,0xAE,0x66,0x3D,
    0xCB,0x95,0xD3,0x52,0x3A,0xB4,0xDE,0xD2,0xBD,0xE9,0xA0,0xBD,0x38,0xD1,0x44,0x4F,0x58,0x7B
};

///////////////////////////////////////// Blowfish functions /////////////////////////////////////////

void CryptManager::BFInit() 
{
	BLOWFISH_CTX* ctx = &BlowfishContext;

	memcpy(ctx->P, BF_PTransformed, 18*4); // 72 (576bit)
	memcpy(ctx->S, sdata, 256*4*4); // 4096
}

void CryptManager::BFEncrypt(uint64_t *x, uint64_t *out)
{
	BLOWFISH_CTX* ctx = &BlowfishContext;
	uint32_t Xl = *(reinterpret_cast<uint32_t*>(x));
	uint32_t Xr = *(reinterpret_cast<uint32_t*>(x) + 1);

	for (int i = 0; i < 16; i += 2)
	{
		Xl ^= ctx->P[i];
	    Xr ^= F(Xl);
        Xr ^= ctx->P[i + 1];
        Xl ^= F(Xr);
	}

    Xl ^= ctx->P[16];
    Xr ^= ctx->P[17];
    std::swap(Xl, Xr);

    uint32_t* result = reinterpret_cast<uint32_t*>(out);
    *result = Xl;
    ++result;
    *result = Xr;
}

void CryptManager::BFDecrypt(uint64_t *x, uint64_t *out)
{
	BLOWFISH_CTX* ctx = &BlowfishContext;
	uint32_t Xl = *(reinterpret_cast<uint32_t*>(x));
	uint32_t Xr = *(reinterpret_cast<uint32_t*>(x) + 1);

	for (int i = 16; i > 0; i -= 2) 
	{
        Xl ^= ctx->P[i + 1];
        Xr ^= F(Xl);
        Xr ^= ctx->P[i];
        Xl ^= F(Xr);
	}

    Xl ^= ctx->P[1];
    Xr ^= ctx->P[0];
    std::swap(Xl, Xr);

    uint32_t* result = reinterpret_cast<uint32_t*>(out);
    *result = Xl;
    ++result;
    *result = Xr;
}

uint32_t CryptManager::F(uint32_t x) 
{
	BLOWFISH_CTX* ctx = &BlowfishContext;
	uint32_t a, b, c, d;

	d = ctx->S[3][x & 0xFF]; // 123 4
	x >>= 8;
	c = ctx->S[2][x & 0xFF]; // 012 3
	x >>= 8;
	b = ctx->S[1][x & 0xFF]; // 001 2
	x >>= 8;
	a = ctx->S[0][x & 0xFF]; // 000 1

    uint32_t h = a + b;
    return (h ^ c) + d;
}

///////////////////////////////////////// TR Data /////////////////////////////////////////

const uint8_t CryptManager::DecArray1[0x38] =
{
	0x39,0x31,0x29,0x21,0x19,0x11,0x09,0x01,0x3A,0x32,0x2A,0x22,0x1A,0x12,0x0A,0x02,
	0x3B,0x33,0x2B,0x23,0x1B,0x13,0x0B,0x03,0x3C,0x34,0x2C,0x24,0x3F,0x37,0x2F,0x27,
	0x1F,0x17,0x0F,0x07,0x3E,0x36,0x2E,0x26,0x1E,0x16,0x0E,0x06,0x3D,0x35,0x2D,0x25,
	0x1D,0x15,0x0D,0x05,0x1C,0x14,0x0C,0x04
};

const uint8_t CryptManager::DecArray2_CEA3D0[0x10] =
{
	0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
};

const uint8_t CryptManager::DecArray3[0x10] =
{
	0x01,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x0F,0x11,0x13,0x15,0x17,0x19,0x1B,0x1C
};

const uint8_t CryptManager::DecArray4_CEA180[48] =
{
	0x0E,0x11,0x0B,0x18,0x01,0x05,0x03,0x1C,0x0F,0x06,0x15,0x0A,0x17,0x13,0x0C,0x04,
    0x1A,0x08,0x10,0x07,0x1B,0x14,0x0D,0x02,0x29,0x34,0x1F,0x25,0x2F,0x37,0x1E,0x28,
    0x33,0x2D,0x21,0x30,0x2C,0x31,0x27,0x38,0x22,0x35,0x2E,0x2A,0x32,0x24,0x1D,0x20
};

const uint8_t CryptManager::DecArray5_CEA3B0[32] =
{
	0x10,0x07,0x14,0x15,0x1D,0x0C,0x1C,0x11,0x01,0x0F,0x17,0x1A,0x05,0x12,0x1F,0x0A,
    0x02,0x08,0x18,0x0E,0x20,0x1B,0x03,0x09,0x13,0x0D,0x1E,0x06,0x16,0x0B,0x04,0x19
};

const uint32_t CryptManager::DecArray6_CEA3F0[4] =
{
	8,4,2,1
};

const uint8_t CryptManager::CEA1B0_DATA[16*64] =
{
	0x0E,0x04,0x0D,0x01,0x02,0x0F,0x0B,0x08,0x03,0x0A,0x06,0x0C,0x05,0x09,0x00,0x07,
    0x00,0x0F,0x07,0x04,0x0E,0x02,0x0D,0x01,0x0A,0x06,0x0C,0x0B,0x09,0x05,0x03,0x08,
    0x04,0x01,0x0E,0x08,0x0D,0x06,0x02,0x0B,0x0F,0x0C,0x09,0x07,0x03,0x0A,0x05,0x00,
    0x0F,0x0C,0x08,0x02,0x04,0x09,0x01,0x07,0x05,0x0B,0x03,0x0E,0x0A,0x00,0x06,0x0D,
    0x0F,0x01,0x08,0x0E,0x06,0x0B,0x03,0x04,0x09,0x07,0x02,0x0D,0x0C,0x00,0x05,0x0A,
    0x03,0x0D,0x04,0x07,0x0F,0x02,0x08,0x0E,0x0C,0x00,0x01,0x0A,0x06,0x09,0x0B,0x05,
    0x00,0x0E,0x07,0x0B,0x0A,0x04,0x0D,0x01,0x05,0x08,0x0C,0x06,0x09,0x03,0x02,0x0F,
    0x0D,0x08,0x0A,0x01,0x03,0x0F,0x04,0x02,0x0B,0x06,0x07,0x0C,0x00,0x05,0x0E,0x09,
    0x0A,0x00,0x09,0x0E,0x06,0x03,0x0F,0x05,0x01,0x0D,0x0C,0x07,0x0B,0x04,0x02,0x08,
    0x0D,0x07,0x00,0x09,0x03,0x04,0x06,0x0A,0x02,0x08,0x05,0x0E,0x0C,0x0B,0x0F,0x01,
    0x0D,0x06,0x04,0x09,0x08,0x0F,0x03,0x00,0x0B,0x01,0x02,0x0C,0x05,0x0A,0x0E,0x07,
    0x01,0x0A,0x0D,0x00,0x06,0x09,0x08,0x07,0x04,0x0F,0x0E,0x03,0x0B,0x05,0x02,0x0C,
    0x07,0x0D,0x0E,0x03,0x00,0x06,0x09,0x0A,0x01,0x02,0x08,0x05,0x0B,0x0C,0x04,0x0F,
    0x0D,0x08,0x0B,0x05,0x06,0x0F,0x00,0x03,0x04,0x07,0x02,0x0C,0x01,0x0A,0x0E,0x09,
    0x0A,0x06,0x09,0x00,0x0C,0x0B,0x07,0x0D,0x0F,0x01,0x03,0x0E,0x05,0x02,0x08,0x04,
    0x03,0x0F,0x00,0x06,0x0A,0x01,0x0D,0x08,0x09,0x04,0x05,0x0B,0x0C,0x07,0x02,0x0E,
    0x02,0x0C,0x04,0x01,0x07,0x0A,0x0B,0x06,0x08,0x05,0x03,0x0F,0x0D,0x00,0x0E,0x09,
    0x0E,0x0B,0x02,0x0C,0x04,0x07,0x0D,0x01,0x05,0x00,0x0F,0x0A,0x03,0x09,0x08,0x06,
    0x04,0x02,0x01,0x0B,0x0A,0x0D,0x07,0x08,0x0F,0x09,0x0C,0x05,0x06,0x03,0x00,0x0E,
    0x0B,0x08,0x0C,0x07,0x01,0x0E,0x02,0x0D,0x06,0x0F,0x00,0x09,0x0A,0x04,0x05,0x03,
    0x0C,0x01,0x0A,0x0F,0x09,0x02,0x06,0x08,0x00,0x0D,0x03,0x04,0x0E,0x07,0x05,0x0B,
    0x0A,0x0F,0x04,0x02,0x07,0x0C,0x09,0x05,0x06,0x01,0x0D,0x0E,0x00,0x0B,0x03,0x08,
    0x09,0x0E,0x0F,0x05,0x02,0x08,0x0C,0x03,0x07,0x00,0x04,0x0A,0x01,0x0D,0x0B,0x06,
    0x04,0x03,0x02,0x0C,0x09,0x05,0x0F,0x0A,0x0B,0x0E,0x01,0x07,0x06,0x00,0x08,0x0D,
    0x04,0x0B,0x02,0x0E,0x0F,0x00,0x08,0x0D,0x03,0x0C,0x09,0x07,0x05,0x0A,0x06,0x01,
    0x0D,0x00,0x0B,0x07,0x04,0x09,0x01,0x0A,0x0E,0x03,0x05,0x0C,0x02,0x0F,0x08,0x06,
    0x01,0x04,0x0B,0x0D,0x0C,0x03,0x07,0x0E,0x0A,0x0F,0x06,0x08,0x00,0x05,0x09,0x02,
    0x06,0x0B,0x0D,0x08,0x01,0x04,0x0A,0x07,0x09,0x05,0x00,0x0F,0x0E,0x02,0x03,0x0C,
    0x0D,0x02,0x08,0x04,0x06,0x0F,0x0B,0x01,0x0A,0x09,0x03,0x0E,0x05,0x00,0x0C,0x07,
    0x01,0x0F,0x0D,0x08,0x0A,0x03,0x07,0x04,0x0C,0x05,0x06,0x0B,0x00,0x0E,0x09,0x02,
    0x07,0x0B,0x04,0x01,0x09,0x0C,0x0E,0x02,0x00,0x06,0x0A,0x0D,0x0F,0x03,0x05,0x08,
    0x02,0x01,0x0E,0x07,0x04,0x0A,0x08,0x0D,0x0F,0x0C,0x09,0x00,0x03,0x05,0x06,0x0B
};

const uint8_t CryptManager::InputData_0CEA0B8[0x40] =
{
	0x3A,0x32,0x2A,0x22,0x1A,0x12,0x0A,0x02,0x3C,0x34,0x2C,0x24,0x1C,0x14,0x0C,0x04,
    0x3E,0x36,0x2E,0x26,0x1E,0x16,0x0E,0x06,0x40,0x38,0x30,0x28,0x20,0x18,0x10,0x08,
	0x39,0x31,0x29,0x21,0x19,0x11,0x09,0x01,0x3B,0x33,0x2B,0x23,0x1B,0x13,0x0B,0x03,
    0x3D,0x35,0x2D,0x25,0x1D,0x15,0x0D,0x05,0x3F,0x37,0x2F,0x27,0x1F,0x17,0x0F,0x07
};

const uint8_t CryptManager::InputData_0CEA0F8[0x40] =
{
	0x28,0x08,0x30,0x10,0x38,0x18,0x40,0x20,0x27,0x07,0x2F,0x0F,0x37,0x17,0x3F,0x1F,
    0x26,0x06,0x2E,0x0E,0x36,0x16,0x3E,0x1E,0x25,0x05,0x2D,0x0D,0x35,0x15,0x3D,0x1D,
	0x24,0x04,0x2C,0x0C,0x34,0x14,0x3C,0x1C,0x23,0x03,0x2B,0x0B,0x33,0x13,0x3B,0x1B,
    0x22,0x02,0x2A,0x0A,0x32,0x12,0x3A,0x1A,0x21,0x01,0x29,0x09,0x31,0x11,0x39,0x19
};

uint8_t CryptManager::OutputData_D1E4E8[128*16]; // 2048
uint8_t CryptManager::OutputData_D22D48[128*16]; // 2048
uint8_t CryptManager::DecArrayOut1_D23548[0x38]; // 56
uint8_t CryptManager::DecArrayOut2_D1E4B0[0x38]; // 56
uint8_t CryptManager::DecArrayOut3_D1ECE8[4096*4]; // 16384

///////////////////////////////////////// TR functions /////////////////////////////////////////

void CryptManager::TRInit()
{
	TRPrepareBasic(OutputData_D22D48, InputData_0CEA0B8);
	TRPrepareBasic(OutputData_D1E4E8, InputData_0CEA0F8);
	// We have the super secure key hardcoded
	uint8_t Key64[8] = {'T', 'E', 'S', 'T', 0, 0, 0, 0};
	TRKeyIntegrate(Key64);
	TRKeyIntegrate2();
	TRKeyIntegrate3();
}

void CryptManager::TREncrypt(uint8_t *Data, uint32_t Len)
{
	Len &= ~7; // make the len multiple of 8
	sub_A7E190_1(Data, Len, true);
}

void CryptManager::TRDecrypt(uint8_t *Data, uint32_t Len)
{
	Len &= ~7; // make the len multiple of 8
	sub_A7E190_1(Data, Len, false);
}

void CryptManager::TRPrepareBasic(uint8_t *Output, const uint8_t *Input)
{
    for(int i = 0; i < 2048; ++i)
		Output[i] = 0;

    for(int i = 0; i < 16; ++i)
	{
        for(int j = 0; j < 16; ++j)
	    {
            for(int k = 0; k < 64; ++k)
			{
				int temp = Input[k] - 1;
				if (temp >> 2 == i)
					if (DecArray6_CEA3F0[temp & 3] & j)
			            *(&Output[128 * i] + 8 * j + (k >> 3)) |= (uint8_t)(DecArray2_CEA3D0[k & 7]);
			}
		}
	}
}

void CryptManager::TRKeyIntegrate(uint8_t *Key)
{
	int v6;

	for(int i = 0; i < 56; ++i)
	{
		int temp = DecArray1[i] - 1;
		DecArrayOut1_D23548[i] = (DecArray2_CEA3D0[temp & 7] & Key[temp >> 3]) != 0;
	}

    // zero out DecStruct1
	for(int i = 0; i < 16; ++i)
		memset(&DecStruct1[i], 0x00, sizeof(_DecStruct1T));

	for(int i = 0; i < 16; ++i)
	{
		for(int j = 0; j < 56; ++j)
		{
			int temp = j + DecArray3[i];
			if((uint32_t)temp >= (((j >= 28) - 1) & 0xFFFFFFE4) + 56)
				v6 = temp - 28;
			else
				v6 = temp;
			DecArrayOut2_D1E4B0[j] = DecArrayOut1_D23548[v6];
		}
		for(int j = 0; j < 48; ++j)
		{
			if(DecArray4_CEA180[j] == 0)
                //Should not happen
				assert(false);
			if(DecArrayOut2_D1E4B0[DecArray4_CEA180[j] - 1])
				DecStruct1[i].D1[j >> 3] += DecArray2_CEA3D0[j & 7];
		}
	}
}

void  CryptManager::TRKeyIntegrate2()
{
    for(int i = 0; i < 4; ++i)
	{
        for(int j = 0; j < 4096; ++j)
		{
			int temp = 16 * sub_A7D470(2 * i, j >> 6);
			DecArrayOut3_D1ECE8[4096 * i + j] = (sub_A7D470(2 * i + 1, j & 0x3F) & 0xF) | (uint8_t)temp;
		}
	}
}

void CryptManager::TRKeyIntegrate3()
{
    // zero out DecStruct3_D1D4B0
    for(int i = 0; i < 4; ++i)
        for(int j = 0; j < 1024; ++j)
            DecStruct3_D1D4B0[i].D1[j] = 0;

    for(int i = 0; i < 4; ++i)
	{
        for(int j = 0; j < 256; ++j)
		{
            for(int k = 0; k < 32; ++k)
			{
				int v4 = DecArray5_CEA3B0[k] - 1;
				if(v4 >> 3 == i) // if(v4 / 8 == i)
					if(DecArray2_CEA3D0[v4 & 7] & j)
						DecStruct3_D1D4B0[i].D1[4 * j + (k >> 3)] |= (uint8_t)(DecArray2_CEA3D0[k & 7]);
			}
		}
	}
}

uint32_t CryptManager::sub_A7D470(uint32_t a1, uint32_t a2)
{
	return DecStruct2_CEA1B0[a1].D1[16 * ((a2 & 1) | ((a2 & 0x20) >> 4)) + ((a2 & 0x1F) >> 1)];
}

void CryptManager::sub_A7D8D0_3(const uint8_t *DataP, uint8_t *B_, uint8_t *out)
{
    uint8_t* out_l = out;
    // zero out "Out"
    for(int i = 0; i < 8; ++i)
		out_l[i] = 0;

    for(int i = 0; i < 16; i += 2)
	{
        out_l = out;
		uint8_t *v8 = &B_[128 *  i     ] + 8 * (((uint32_t)*DataP >> 4) & 0xF);
		uint8_t *v9 = &B_[128 * (i + 1)] + 8 * (           *DataP       & 0xF);

        for(int j = 0; j < 8; ++j)
        {
			*out_l |= *v9 | *v8;
            out_l++;
            v9++;
            v8++;
        }
        ++DataP;
	}
}

void CryptManager::sub_A7D790(uint8_t *a1, uint8_t *a2)
{
	uint8_t *v3;
	uint8_t *v4;
	uint8_t *v6;
	
	v3 = a2;
	*a2 = 0;
	++v3;
	*v3++ = 0;
	*v3++ = 0;
	*v3 = 0;
	v4 = a1;

    for(int i = 0; i < 4; ++i)
	{
		v6 = &DecStruct3_D1D4B0[i].D1[4 * *v4];
		v3 = a2;
		*a2 |= *v6++;
		++v3;
		*v3++ |= *v6++;
		*v3++ |= *v6++;
		*v3 |= *v6;
		++v4;
	}
}

void CryptManager::sub_A7D4B0(uint8_t *a1, uint8_t *a2)
{
	int32_t  v4;
	uint32_t v5;
	int32_t  v6;
	int32_t  v7;
	uint32_t v8;
	int32_t  v9;
	uint8_t *v10;

	v4 = *a1;
	v5 = *(a1 + 1);
	v6 = *(a1 + 2);
	v7 = *(a1 + 3);
	v8 = *(a1 + 4);
	v9 = *(a1 + 5);
	v10 = a2;

	*a2 =    DecArrayOut3_D1ECE8[         (   ((((uint32_t) v5) >> 4)   & 0xF) | (uint16_t) (16 * (uint16_t)v4))      & 0xFFF ];
	++v10;
	*v10++ = DecArrayOut3_D1ECE8[0x1000 + ( (   (uint8_t)   v6                 | (uint16_t) (     (uint16_t)v5 << 8)) & 0xFFF)];
	*v10++ = DecArrayOut3_D1ECE8[0x2000 + ( ( (((uint32_t)  v8 >> 4)    & 0xF) | (uint16_t) (16 * (uint16_t)v7))      & 0xFFF)];
	*v10   = DecArrayOut3_D1ECE8[0x3000 + ( (   (uint8_t)   v9                 | (uint16_t) (     (uint16_t)v8 << 8)) & 0xFFF)];
}

void CryptManager::sub_A7D5E0_5(uint8_t *p1, uint8_t *p2)
{
	uint8_t *v3;
	uint8_t v5;
	uint8_t v6;
	uint8_t v7;
	uint8_t v8;

	v3 = p2;
	v5 = *p1;
	v6 = *(p1 + 1);
	v7 = *(p1 + 2);
	v8 = *(p1 + 3);
	*v3++ = (uint8_t)((v5 & 0x18) >> 3) | (uint8_t)((uint8_t)(    (v5 & 0xF8) >> 1) | (uint8_t)(              (v8 & 1) << 7                               ));
	*v3++ = (uint8_t)((v6 & 0xE0) >> 5) | (uint8_t)((uint8_t)(8 * (v5 & 1)  )       | (uint8_t)(    (uint8_t)((v6 & 0x80) >> 3) | (uint8_t)(32 * (v5 & 7))));
	*v3++ = (uint8_t)((v7 & 0x80) >> 7) | (uint8_t)((uint8_t)(2 * (v6 & 0x1F)     ) | (uint8_t)(8 *           (v6 & 0x18)                                 ));
	*v3++ = (uint8_t)((v7 & 0x18) >> 3) | (uint8_t)((uint8_t)(    (v7 & 0xF8) >> 1) | (uint8_t)(              (v6 & 1) << 7                               ));
	*v3++ = (uint8_t)((v8 & 0xE0) >> 5) | (uint8_t)((uint8_t)(8 * (v7 & 1))         | (uint8_t)(    (uint8_t)((v8 & 0x80) >> 3) | (uint8_t)(32 * (v7 & 7))));
	*v3 =   (uint8_t)((v5 & 0x80) >> 7) | (uint8_t)((uint8_t)(2 * (v8 & 0x1F)     ) | (uint8_t)(8 *           (v8 & 0x18)                                 ));
}

void CryptManager::sub_A7DA60_4(uint8_t *d, int idx, uint8_t *a3)
{
	uint8_t *v4;
	uint8_t v5[6];
	uint8_t *p2;
	uint8_t a1[6];
	uint8_t *v8;
	uint8_t a2[4];

	v4 = &DecStruct1[idx].D1[0];
	p2 = v5;
	v8 = a1;
	sub_A7D5E0_5(d, v5);
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	sub_A7D4B0(a1, (uint8_t *)a2);
    sub_A7D790((uint8_t *)a2, a3);
}

void CryptManager::sub_A7DC90_3(int idx, uint8_t *m, uint8_t *m2)
{
	uint8_t *v4;
	uint8_t *v5;
	uint8_t v6[6];

	v4 = m2;
	v5 = m + 4;
	sub_A7DA60_4(m + 4, idx, v6);
	*v4++ = *v5++;
	*v4++ = *v5++;
	*v4++ = *v5++;
	*v4++ = *v5;
	m2[4] = m[0] ^ v6[0];
	m2[5] = m[1] ^ v6[1];
	m2[6] = m[2] ^ v6[2];
	m2[7] = m[3] ^ v6[3];
}

// decrypt
void CryptManager::sub_A7DE00_2(uint8_t *DataP1, uint8_t *DataP2)
{
	uint8_t v5[128 + 8];
	uint8_t v7[8];

	sub_A7D8D0_3(DataP1, OutputData_D22D48, v5);

    for(int i = 0; i < 16; ++i)
	    sub_A7DC90_3(15 - i, &v5[8 * i], &v5[8 * i + 8]);

	v7[0] = v5[0x84];
	v7[1] = v5[0x85];
	v7[2] = v5[0x86];
	v7[3] = v5[0x87];
	v7[4] = v5[0x80];
	v7[5] = v5[0x81];
	v7[6] = v5[0x82];
	v7[7] = v5[0x83];

    sub_A7D8D0_3(v7, OutputData_D1E4E8, DataP2);
}

// encrypt
void CryptManager::sub_A7DFD0(uint8_t *DataP1, uint8_t *DataP2)
{
	uint8_t v5[128 + 8];
	uint8_t v7[8];
	
	sub_A7D8D0_3(DataP1, OutputData_D22D48, v5);

    for(int i = 0; i < 16; ++i)
	    sub_A7DC90_3(i, &v5[8 * i], &v5[8 * i + 8]);

	v7[0] = v5[0x84];
	v7[1] = v5[0x85];
	v7[2] = v5[0x86];
	v7[3] = v5[0x87];
	v7[4] = v5[0x80];
	v7[5] = v5[0x81];
	v7[6] = v5[0x82];
	v7[7] = v5[0x83];

    sub_A7D8D0_3(v7, OutputData_D1E4E8, DataP2);
}

void CryptManager::sub_A7E190_1(uint8_t *Data, uint32_t Len, bool State)
{
	while (Len > 0)
	{
	    if (State) // encrypt
			sub_A7DFD0(Data, Data);
		else       // decrypt
			sub_A7DE00_2(Data, Data);
		Len -= 8;
		Data += 8;
	}
}
